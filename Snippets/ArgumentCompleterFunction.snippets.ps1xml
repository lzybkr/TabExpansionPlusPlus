<?xml version='1.0' encoding='utf-8' ?>
<Snippets  xmlns='http://schemas.microsoft.com/PowerShell/Snippets'>
    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: ArgumentCompleter - PowerShell commands</Title>
            <Description>Adding function with [ArgumentCompleter()] with all the goodies. Use for PowerShell commands.</Description>
            <Author>Bartosz Bielawski</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>

        <Code>
            <Script Language='PowerShell' CaretOffset='23'>
                <![CDATA[#
# .SYNOPSIS
#
#     Description of added completer
#
function 
{
    [ArgumentCompleter(
        Parameter = 'ParameterName',
        Command = ('List', 'of', 'Commands', 'or', 'ScriptBlock'),
        Description = 'Your description, with example:  Get-Foo -Bar <TAB>'
    )]
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)

}
]]>
            </Script>
        </Code>
    </Snippet>
    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: ArgumentCompleter - native commands</Title>
            <Description>Adding function with [ArgumentCompleter()] with all the goodies. Use for native commands.</Description>
            <Author>Bartosz Bielawski</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>

        <Code>
            <Script Language='PowerShell' CaretOffset='23'>
                <![CDATA[#
# .SYNOPSIS
#
#     Description of added completer
#
function 
{
    [ArgumentCompleter(
        Native,
        Command = 'YourCommand',
        Description = 'Completes parameters to YourCommand.exe'
    )]
    param($wordToComplete, $commandAst)

}
]]>
            </Script>
        </Code>
    </Snippet>
    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: ArgumentCompleter paired with initialization</Title>
            <Description>Adding two functions: one with [InitializeArgumentCompleter()] and other with [ArgumentCompleter()] paired with it.</Description>
            <Author>Bartosz Bielawski</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>

        <Code>
            <Script Language='PowerShell' CaretOffset='5'>
                <![CDATA[#
# Reason to use initialization...
#
function 
{
    [InitializeArgumentCompleter('Command_Parameter')]
    param()

    return $privateData
}

#
# .SYNOPSIS
#
#     Information about completion
#
function 
{
    [ArgumentCompleter(
        Parameter = 'ParameterName',
        Command = 'CommandName',
        Description = 'Description with: example')]
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)

    $privateData = Get-CompletionPrivateData -Key Command_Parameter
    # Use $privateData in generating completion results

}
]]>
            </Script>
        </Code>
    </Snippet>

    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: Function-ArgumentCompleter - Simple</Title>
            <Description>Provides snippet for argument completer function.</Description>
            <Author>Kurt Roggen [BE]</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Code>
            <Script Language='PowerShell' CaretOffset='5'>
                <![CDATA[#

# Argument Completion function <Topic>
function <Module>_<Topic>NameArgumentCompletion
{
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)

    <SourceModule>\<Verb-Noun> -Name "$wordToComplete*" |
        Sort-Object -Property Name |
        ForEach-Object {
                $CompletionText = "{0}" -f $_.Name
                $ToolTip        = "{0}" -f $_.Description
                $ListItemText   = "{0}" -f $_.Name

                New-CompletionResult -CompletionText $CompletionText -ListItemText $ListItemText -ToolTip $ToolTip
        }
}

]]>
            </Script>
        </Code>
    </Snippet>
    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: Function-ArgumentCompleter - With Parameter Context</Title>
            <Description>Provides snippet for argument completer function with parameter context.</Description>
            <Author>Kurt Roggen [BE]</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Code>
            <Script Language='PowerShell' CaretOffset='5'>
                <![CDATA[#

# Argument Completion function <Topic> (With Parameter Context)
function <Module>_<Topic>NameArgumentCompletion
{
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)

    $optionalParams = @{}
    $ComputerName = $fakeBoundParameter["ComputerName"]
    $CimSession   = $fakeBoundParameter["CimSession"]
    $Cluster      = $fakeBoundParameter["Cluster"]

    if($ComputerName) { $optionalParams.ComputerName = $ComputerName }
    if($CimSession)   { $optionalParams.CimSession   = $CimSession   }
    if($Cluster)      { $optionalParams.Cluster      = $Cluster      }

    <SourceModule>\<Verb-Noun> -Name "$wordToComplete*" @optionalParams |
        Sort-Object -Property Name |
        ForEach-Object {
                $CompletionText = "{0}" -f $_.Name
                $ToolTip        = "{0}" -f $_.Description
                $ListItemText   = "{0}" -f $_.Name

                New-CompletionResult -CompletionText $CompletionText -ListItemText $ListItemText -ToolTip $ToolTip
        }
}

]]>
            </Script>
        </Code>
    </Snippet>
    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: Function-ArgumentCompleter - With Argument Caching</Title>
            <Description>Provides snippet for argument completer function with argument caching.</Description>
            <Author>Kurt Roggen [BE]</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Code>
            <Script Language='PowerShell' CaretOffset='5'>
                <![CDATA[#

# Argument Completion function <Topic> (With argument caching)
function <Module>_<Topic>NameArgumentCompletion
{
    param($commandName, $parameterName, $wordToComplete, $commandAst, $fakeBoundParameter)

    $optionalParams = @{}
    $ComputerName = $fakeBoundParameter["ComputerName"]
    $CimSession   = $fakeBoundParameter["CimSession"]
    $Cluster      = $fakeBoundParameter["Cluster"]

    if($ComputerName) { $optionalParams.ComputerName = $ComputerName }
    if($CimSession)   { $optionalParams.CimSession   = $CimSession   }
    if($Cluster)      { $optionalParams.Cluster      = $Cluster      }

    $CacheKey = if($ComputerName) { "HotFix_Cache_$ComputerName" } else { "HotFix_Cache" }
    $Cache = Get-CompletionPrivateData -Key $CacheKey
    if ($Cache) { 
        $List = $Cache 
    } else { 
        $List = <SourceModule>\<Verb-Noun> -Name "$wordToComplete*" @optionalParams
        Set-CompletionPrivateData -Key $CacheKey -Value $List -ExpirationSeconds 300 # Expiration: 5 min
    }

    $List | 
        Sort-Object -Property Name |
        ForEach-Object {
                $CompletionText = "{0}" -f $_.Name
                $ToolTip        = "{0}" -f $_.Description
                $ListItemText   = "{0}" -f $_.Name

                New-CompletionResult -CompletionText $CompletionText -ListItemText $ListItemText -ToolTip $ToolTip
        }
}

]]>
            </Script>
        </Code>
    </Snippet>

    <Snippet Version='1.0.0'>
        <Header>
            <Title>TabExpansion++: Register-ArgumentCompleter</Title>
            <Description>Provides snippet for argument completer registration.</Description>
            <Author>Kurt Roggen [BE]</Author>
            <SnippetTypes>
                <SnippetType>Expansion</SnippetType>
            </SnippetTypes>
        </Header>
        <Code>
            <Script Language='PowerShell' CaretOffset='5'>
                <![CDATA[#

# <Topic>
Register-ArgumentCompleter `
    -Command ('<Verb-Noun>','<Verb-Noun>') `
    -Parameter 'Name' `
    -Description 'Complete names, for example: <Verb-Noun> -Name <TAB>' `
    -ScriptBlock $function:<Module>_<Topic>NameArgumentCompletion

]]>
            </Script>
        </Code>
    </Snippet>

</Snippets>

